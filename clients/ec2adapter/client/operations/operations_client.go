// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddSecurityGroup(params *AddSecurityGroupParams) (*AddSecurityGroupCreated, error)

	AssociateAddress(params *AssociateAddressParams) (*AssociateAddressCreated, error)

	AuthorizeSecurityGroupEgress(params *AuthorizeSecurityGroupEgressParams) (*AuthorizeSecurityGroupEgressCreated, error)

	AuthorizeSecurityGroupIngress(params *AuthorizeSecurityGroupIngressParams) (*AuthorizeSecurityGroupIngressCreated, error)

	CreateAddress(params *CreateAddressParams) (*CreateAddressCreated, error)

	CreateSecurityGroup(params *CreateSecurityGroupParams) (*CreateSecurityGroupCreated, error)

	DeleteAddress(params *DeleteAddressParams) (*DeleteAddressNoContent, error)

	DeleteAddresses(params *DeleteAddressesParams) (*DeleteAddressesNoContent, error)

	DeleteSecurityGroup(params *DeleteSecurityGroupParams) (*DeleteSecurityGroupNoContent, error)

	DeleteSecurityGroups(params *DeleteSecurityGroupsParams) (*DeleteSecurityGroupsNoContent, error)

	DetachAutoscalingGroupInstances(params *DetachAutoscalingGroupInstancesParams) (*DetachAutoscalingGroupInstancesNoContent, error)

	DisassociateAddress(params *DisassociateAddressParams) (*DisassociateAddressNoContent, error)

	GetAddress(params *GetAddressParams) (*GetAddressOK, error)

	GetAutoscalingGroup(params *GetAutoscalingGroupParams) (*GetAutoscalingGroupOK, error)

	GetInstance(params *GetInstanceParams) (*GetInstanceOK, error)

	GetSecurityGroup(params *GetSecurityGroupParams) (*GetSecurityGroupOK, error)

	ListAddresses(params *ListAddressesParams) (*ListAddressesOK, error)

	ListSecurityGroups(params *ListSecurityGroupsParams) (*ListSecurityGroupsOK, error)

	Ping(params *PingParams) (*PingOK, error)

	RemoveSecurityGroup(params *RemoveSecurityGroupParams) (*RemoveSecurityGroupNoContent, error)

	RevokeSecurityGroupEgress(params *RevokeSecurityGroupEgressParams) (*RevokeSecurityGroupEgressNoContent, error)

	RevokeSecurityGroupIngress(params *RevokeSecurityGroupIngressParams) (*RevokeSecurityGroupIngressNoContent, error)

	SetAutoscalingGroupDesiredCapacity(params *SetAutoscalingGroupDesiredCapacityParams) (*SetAutoscalingGroupDesiredCapacityOK, error)

	TerminateInstance(params *TerminateInstanceParams) (*TerminateInstanceNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddSecurityGroup adds security group

  Add a SecurityGroup to an EC2 Instance.
*/
func (a *Client) AddSecurityGroup(params *AddSecurityGroupParams) (*AddSecurityGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSecurityGroup",
		Method:             "POST",
		PathPattern:        "/security-groups/{id}/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSecurityGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssociateAddress associates address

  Associate an Elastic IP to an instance or network interface.
*/
func (a *Client) AssociateAddress(params *AssociateAddressParams) (*AssociateAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssociateAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "associateAddress",
		Method:             "POST",
		PathPattern:        "/addresses/{id}/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssociateAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssociateAddressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for associateAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthorizeSecurityGroupEgress creates egress permission

  Add an Egress permission to a security group.
*/
func (a *Client) AuthorizeSecurityGroupEgress(params *AuthorizeSecurityGroupEgressParams) (*AuthorizeSecurityGroupEgressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeSecurityGroupEgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authorizeSecurityGroupEgress",
		Method:             "POST",
		PathPattern:        "/security-groups/{id}/egress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthorizeSecurityGroupEgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizeSecurityGroupEgressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorizeSecurityGroupEgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthorizeSecurityGroupIngress creates ingress permission

  Add an Ingress permission to a security group.
*/
func (a *Client) AuthorizeSecurityGroupIngress(params *AuthorizeSecurityGroupIngressParams) (*AuthorizeSecurityGroupIngressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeSecurityGroupIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authorizeSecurityGroupIngress",
		Method:             "POST",
		PathPattern:        "/security-groups/{id}/ingress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthorizeSecurityGroupIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizeSecurityGroupIngressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorizeSecurityGroupIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAddress creates address

  Create an Elastic IP address.
*/
func (a *Client) CreateAddress(params *CreateAddressParams) (*CreateAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAddress",
		Method:             "POST",
		PathPattern:        "/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAddressCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSecurityGroup creates security group

  Create a SecurityGroup.
*/
func (a *Client) CreateSecurityGroup(params *CreateSecurityGroupParams) (*CreateSecurityGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSecurityGroup",
		Method:             "POST",
		PathPattern:        "/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSecurityGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAddress deletes address

  Delete an Elastic IP address by ID.
*/
func (a *Client) DeleteAddress(params *DeleteAddressParams) (*DeleteAddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAddress",
		Method:             "DELETE",
		PathPattern:        "/addresses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAddresses deletes addresses

  Delete all Elastic IP addresses.
*/
func (a *Client) DeleteAddresses(params *DeleteAddressesParams) (*DeleteAddressesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAddresses",
		Method:             "DELETE",
		PathPattern:        "/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAddressesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSecurityGroup deletes security group

  Delete a SecurityGroup by ID.
*/
func (a *Client) DeleteSecurityGroup(params *DeleteSecurityGroupParams) (*DeleteSecurityGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/security-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSecurityGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSecurityGroups deletes security groups

  Delete all SecurityGroups.
*/
func (a *Client) DeleteSecurityGroups(params *DeleteSecurityGroupsParams) (*DeleteSecurityGroupsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSecurityGroups",
		Method:             "DELETE",
		PathPattern:        "/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSecurityGroupsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSecurityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetachAutoscalingGroupInstances detaches instance

  Detach instances from an autoscaling group.
*/
func (a *Client) DetachAutoscalingGroupInstances(params *DetachAutoscalingGroupInstancesParams) (*DetachAutoscalingGroupInstancesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachAutoscalingGroupInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachAutoscalingGroupInstances",
		Method:             "DELETE",
		PathPattern:        "/autoscaling-groups/{name}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachAutoscalingGroupInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachAutoscalingGroupInstancesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detachAutoscalingGroupInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisassociateAddress disassociates address

  Disassociate an Elastic IP from an instance or network interface.
*/
func (a *Client) DisassociateAddress(params *DisassociateAddressParams) (*DisassociateAddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisassociateAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disassociateAddress",
		Method:             "DELETE",
		PathPattern:        "/addresses/{id}/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisassociateAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisassociateAddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disassociateAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAddress gets address

  Get an Elastic IP address by ID.
*/
func (a *Client) GetAddress(params *GetAddressParams) (*GetAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddress",
		Method:             "GET",
		PathPattern:        "/addresses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutoscalingGroup gets autoscaling group by name

  Get an AutoscalingGroup by its name.
*/
func (a *Client) GetAutoscalingGroup(params *GetAutoscalingGroupParams) (*GetAutoscalingGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoscalingGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAutoscalingGroup",
		Method:             "GET",
		PathPattern:        "/autoscaling-groups/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutoscalingGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoscalingGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAutoscalingGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstance gets e c2 instance

  Get an AWS EC2 Instance by its ID.
*/
func (a *Client) GetInstance(params *GetInstanceParams) (*GetInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstance",
		Method:             "GET",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecurityGroup gets security group by ID

  Get a SecurityGroup by its ID.
*/
func (a *Client) GetSecurityGroup(params *GetSecurityGroupParams) (*GetSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSecurityGroup",
		Method:             "GET",
		PathPattern:        "/security-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAddresses gets addresses

  Get all Elastic IP addresses.
*/
func (a *Client) ListAddresses(params *ListAddressesParams) (*ListAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAddresses",
		Method:             "GET",
		PathPattern:        "/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecurityGroups gets security groups

  Get all Security Groups manage by this service.
*/
func (a *Client) ListSecurityGroups(params *ListSecurityGroupsParams) (*ListSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSecurityGroups",
		Method:             "GET",
		PathPattern:        "/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecurityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ping pings

  Ping the server.
*/
func (a *Client) Ping(params *PingParams) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveSecurityGroup removes security group

  Remove a SecurityGroup from an EC2 Instance.
*/
func (a *Client) RemoveSecurityGroup(params *RemoveSecurityGroupParams) (*RemoveSecurityGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/security-groups/{id}/associate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSecurityGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeSecurityGroupEgress removes egress permission

  Remove an Egress permission from a security group.
*/
func (a *Client) RevokeSecurityGroupEgress(params *RevokeSecurityGroupEgressParams) (*RevokeSecurityGroupEgressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeSecurityGroupEgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeSecurityGroupEgress",
		Method:             "DELETE",
		PathPattern:        "/security-groups/{id}/egress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeSecurityGroupEgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeSecurityGroupEgressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeSecurityGroupEgress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeSecurityGroupIngress removes ingress permission

  Remove an Ingress permission from a security group.
*/
func (a *Client) RevokeSecurityGroupIngress(params *RevokeSecurityGroupIngressParams) (*RevokeSecurityGroupIngressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeSecurityGroupIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeSecurityGroupIngress",
		Method:             "DELETE",
		PathPattern:        "/security-groups/{id}/ingress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeSecurityGroupIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeSecurityGroupIngressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeSecurityGroupIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAutoscalingGroupDesiredCapacity sets desired capacity

  Set an autoscaling group desired capacity.
*/
func (a *Client) SetAutoscalingGroupDesiredCapacity(params *SetAutoscalingGroupDesiredCapacityParams) (*SetAutoscalingGroupDesiredCapacityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAutoscalingGroupDesiredCapacityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAutoscalingGroupDesiredCapacity",
		Method:             "PUT",
		PathPattern:        "/autoscaling-groups/{name}/desired-capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetAutoscalingGroupDesiredCapacityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAutoscalingGroupDesiredCapacityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAutoscalingGroupDesiredCapacity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TerminateInstance terminates instance

  Terminates an EC2 instance by ID.
*/
func (a *Client) TerminateInstance(params *TerminateInstanceParams) (*TerminateInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "terminateInstance",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerminateInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerminateInstanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for terminateInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
