// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"quortex.io/kubestitute/clients/ec2adapter/models"
)

// PingReader is a Reader for the Ping structure.
type PingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPingOK creates a PingOK with default headers values
func NewPingOK() *PingOK {
	return &PingOK{}
}

/*
PingOK handles this case with default header values.

OK
*/
type PingOK struct {
	Payload string
}

func (o *PingOK) Error() string {
	return fmt.Sprintf("[GET /ping][%d] pingOK  %+v", 200, o.Payload)
}

func (o *PingOK) GetPayload() string {
	return o.Payload
}

func (o *PingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPingBadRequest creates a PingBadRequest with default headers values
func NewPingBadRequest() *PingBadRequest {
	return &PingBadRequest{}
}

/*
PingBadRequest handles this case with default header values.

Bad Request
*/
type PingBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PingBadRequest) Error() string {
	return fmt.Sprintf("[GET /ping][%d] pingBadRequest  %+v", 400, o.Payload)
}

func (o *PingBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPingForbidden creates a PingForbidden with default headers values
func NewPingForbidden() *PingForbidden {
	return &PingForbidden{}
}

/*
PingForbidden handles this case with default header values.

Forbidden
*/
type PingForbidden struct {
	Payload *models.ErrorResponse
}

func (o *PingForbidden) Error() string {
	return fmt.Sprintf("[GET /ping][%d] pingForbidden  %+v", 403, o.Payload)
}

func (o *PingForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPingInternalServerError creates a PingInternalServerError with default headers values
func NewPingInternalServerError() *PingInternalServerError {
	return &PingInternalServerError{}
}

/*
PingInternalServerError handles this case with default header values.

Internal Server Error
*/
type PingInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ping][%d] pingInternalServerError  %+v", 500, o.Payload)
}

func (o *PingInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
