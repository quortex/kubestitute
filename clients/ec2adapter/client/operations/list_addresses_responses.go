// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"quortex.io/kubestitute/clients/ec2adapter/models"
)

// ListAddressesReader is a Reader for the ListAddresses structure.
type ListAddressesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAddressesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAddressesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAddressesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAddressesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAddressesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAddressesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListAddressesOK creates a ListAddressesOK with default headers values
func NewListAddressesOK() *ListAddressesOK {
	return &ListAddressesOK{}
}

/*ListAddressesOK handles this case with default header values.

OK
*/
type ListAddressesOK struct {
	Payload []*models.Address
}

func (o *ListAddressesOK) Error() string {
	return fmt.Sprintf("[GET /addresses][%d] listAddressesOK  %+v", 200, o.Payload)
}

func (o *ListAddressesOK) GetPayload() []*models.Address {
	return o.Payload
}

func (o *ListAddressesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddressesBadRequest creates a ListAddressesBadRequest with default headers values
func NewListAddressesBadRequest() *ListAddressesBadRequest {
	return &ListAddressesBadRequest{}
}

/*ListAddressesBadRequest handles this case with default header values.

Bad Request
*/
type ListAddressesBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ListAddressesBadRequest) Error() string {
	return fmt.Sprintf("[GET /addresses][%d] listAddressesBadRequest  %+v", 400, o.Payload)
}

func (o *ListAddressesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAddressesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddressesForbidden creates a ListAddressesForbidden with default headers values
func NewListAddressesForbidden() *ListAddressesForbidden {
	return &ListAddressesForbidden{}
}

/*ListAddressesForbidden handles this case with default header values.

Forbidden
*/
type ListAddressesForbidden struct {
	Payload *models.ErrorResponse
}

func (o *ListAddressesForbidden) Error() string {
	return fmt.Sprintf("[GET /addresses][%d] listAddressesForbidden  %+v", 403, o.Payload)
}

func (o *ListAddressesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAddressesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddressesNotFound creates a ListAddressesNotFound with default headers values
func NewListAddressesNotFound() *ListAddressesNotFound {
	return &ListAddressesNotFound{}
}

/*ListAddressesNotFound handles this case with default header values.

Not Found
*/
type ListAddressesNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ListAddressesNotFound) Error() string {
	return fmt.Sprintf("[GET /addresses][%d] listAddressesNotFound  %+v", 404, o.Payload)
}

func (o *ListAddressesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAddressesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddressesInternalServerError creates a ListAddressesInternalServerError with default headers values
func NewListAddressesInternalServerError() *ListAddressesInternalServerError {
	return &ListAddressesInternalServerError{}
}

/*ListAddressesInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListAddressesInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ListAddressesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /addresses][%d] listAddressesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAddressesInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListAddressesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
