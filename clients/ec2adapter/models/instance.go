// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// The Availability Zone of the instance.
	AvailabilityZone string `json:"availability_zone,omitempty"`

	// Specifies whether enhanced networking with ENA is enabled.
	EnaSupport bool `json:"ena_support,omitempty"`

	// The ID of the AMI used to launch the instance.
	ImageID string `json:"image_id,omitempty"`

	// The ID of the instance.
	InstanceID string `json:"instance_id,omitempty"`

	// Indicates whether this is a Spot Instance or a Scheduled Instance.
	InstanceLifecycle string `json:"instance_lifecycle,omitempty"`

	// The instance type.
	InstanceType string `json:"instance_type,omitempty"`

	// The time the instance was launched.
	LaunchTime string `json:"launch_time,omitempty"`

	// [EC2-VPC] The network interfaces for the instance.
	NetworkInterfaces []*InstanceNetworkInterface `json:"network_interfaces"`

	// (IPv4 only) The private DNS hostname name assigned to the instance. This
	// DNS hostname can only be used inside the Amazon EC2 network. This name is
	// not available until the instance enters the running state.
	//
	// [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private
	// DNS hostnames if you've enabled DNS resolution and DNS hostnames in your
	// VPC. If you are not using the Amazon-provided DNS server in your VPC, your
	// custom domain name servers must resolve the hostname as appropriate.
	PrivateDNSName string `json:"private_dns_name,omitempty"`

	// The private IPv4 address assigned to the instance.
	PrivateIPAddress string `json:"private_ip_address,omitempty"`

	// (IPv4 only) The public DNS name assigned to the instance. This name is not
	// available until the instance enters the running state. For EC2-VPC, this
	// name is only available if you've enabled DNS hostnames for your VPC.
	PublicDNSName string `json:"public_dns_name,omitempty"`

	// The public IPv4 address, or the Carrier IP address assigned to the instance,
	// if applicable.
	//
	// A Carrier IP address only applies to an instance launched in a subnet associated
	// with a Wavelength Zone.
	PublicIPAddress string `json:"public_ip_address,omitempty"`

	// The root device type used by the AMI. The AMI can use an EBS volume or an
	// instance store volume.
	RootDeviceType string `json:"root_device_type,omitempty"`

	// The security groups for the instance.
	SecurityGroups []*GroupIdentifier `json:"security_groups"`

	// The current state of the instance.
	// pending
	// running
	// shutting-down
	// terminated
	// stopping
	// stopped
	State string `json:"state,omitempty"`

	// [EC2-VPC] The ID of the subnet in which the instance is running.
	SubnetID string `json:"subnet_id,omitempty"`

	// Any tags assigned to the instance.
	Tags map[string]string `json:"tags,omitempty"`

	// The virtualization type of the instance.
	VirtualizationType string `json:"virtualization_type,omitempty"`

	// [EC2-VPC] The ID of the VPC in which the instance is running.
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
