// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InstanceNetworkInterface instance network interface
//
// swagger:model InstanceNetworkInterface
type InstanceNetworkInterface struct {

	// Describes the type of network interface.
	//
	// Valid values: interface | efa
	InterfaceType string `json:"interface_type,omitempty"`

	// The ID of the network interface.
	NetworkInterfaceID string `json:"network_interface_id,omitempty"`

	// The private DNS name.
	PrivateDNSName string `json:"private_dns_name,omitempty"`

	// The IPv4 address of the network interface within the subnet.
	PrivateIP string `json:"private_ip,omitempty"`

	// The public DNS name.
	PublicDNSName string `json:"public_dns_name,omitempty"`

	// The public IP address or Elastic IP address bound to the network interface.
	PublicIP string `json:"public_ip,omitempty"`

	// One or more security groups.
	SecurityGroups []*GroupIdentifier `json:"security_groups"`

	// The status of the network interface.
	// available
	// associated
	// attaching
	// in-use
	// detaching
	State string `json:"state,omitempty"`

	// The ID of the subnet.
	SubnetID string `json:"subnet_id,omitempty"`

	// The ID of the VPC.
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this instance network interface
func (m *InstanceNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceNetworkInterface) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceNetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceNetworkInterface) UnmarshalBinary(b []byte) error {
	var res InstanceNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
