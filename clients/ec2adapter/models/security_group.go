// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityGroup security group
//
// swagger:model SecurityGroup
type SecurityGroup struct {

	// A description of the security group.
	Description string `json:"description,omitempty"`

	// The outbound rules associated with the security group.
	EgressPermissions []*Permission `json:"egress_permissions"`

	// The ID of the security group.
	GroupID string `json:"group_id,omitempty"`

	// The inbound rules associated with the security group.
	IngressPermissions []*Permission `json:"ingress_permissions"`

	// The name of the security group.
	Name string `json:"name,omitempty"`

	// Tags is any tags assigned to the Security Group.
	Tags map[string]string `json:"tags,omitempty"`

	// [VPC only] The ID of the VPC for the security group.
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this security group
func (m *SecurityGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgressPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressPermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroup) validateEgressPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressPermissions) { // not required
		return nil
	}

	for i := 0; i < len(m.EgressPermissions); i++ {
		if swag.IsZero(m.EgressPermissions[i]) { // not required
			continue
		}

		if m.EgressPermissions[i] != nil {
			if err := m.EgressPermissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egress_permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) validateIngressPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressPermissions) { // not required
		return nil
	}

	for i := 0; i < len(m.IngressPermissions); i++ {
		if swag.IsZero(m.IngressPermissions[i]) { // not required
			continue
		}

		if m.IngressPermissions[i] != nil {
			if err := m.IngressPermissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingress_permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroup) UnmarshalBinary(b []byte) error {
	var res SecurityGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
